module DataModel
	module Attributes
    
  end
end

module LowestStudents
  LOWEST_THIRD_ELA = [203652045, 204067045, 204878821, 205089097, 205403363, 205672215, 203681424, 204307284, 204888135, 209090638, 209359470, 219225869, 203552351, 203810882, 203932926, 204066518, 204620579, 205055577, 205403421, 221388895, 204125371, 204878284, 204925259, 274656065, 203491758, 203574983, 203681325, 203849203, 204908859, 205502081, 206408957, 209091115, 205933781, 206707952, 208191577, 226587863, 205439243, 205933237, 206012874, 209636786, 205022981, 205783020, 205950892, 205999139, 206482788, 206605008, 207175985, 207249673, 207676552, 205523509, 205782238, 205801749, 205831092, 205933690, 206047185, 206566291, 207129552, 207212622, 207250234, 204853261, 205392228, 205902976, 206078172, 206649469, 208121061, 205585573, 205585789, 205950470, 205951023, 208119750, 207389818, 207453341, 207481342, 207524927, 208694521, 215313834, 206815797, 207239807, 207424896, 207766171, 207978115, 208249201, 207474578, 207726852, 205865462, 206652919, 207123977, 207481177, 207658204, 207662115, 206782328, 208388686, 208715664, 207176314, 207234956, 207406422, 207708793, 208270595, 209330711, 207389784, 207744327, 207909227, 208349829, 209482454, 206794158, 207356080, 207356437, 207648221, 207744145, 208716134, 216177493, 203776844, 203849161, 204066450, 205366396, 205507775, 203898648, 203932520, 204374680, 204379119, 204782247, 205644024, 205739790, 205909864, 221430150, 203629407, 204111371, 204529978, 203735568, 204307128, 204661185, 205553175, 206233199, 206233520, 207819665, 207819897, 207976507, 275256576, 203735576, 203965470, 204319404, 203932991, 204390405, 204444830, 204695654, 204821961, 205670573, 207213489, 207802893, 214610602, 203283502, 204156715, 205527765, 205585680, 206186934, 206483307, 206765901, 207176322, 207356395, 205585706, 205801764, 205801798, 205902307, 205902422, 207688029, 207910407, 221100092, 204471940, 205254253, 205801160, 205933583, 205933955, 206083206, 206374647, 207176124, 207176348, 207205196, 207390139, 207907106, 205336977, 205585672, 206584500, 207129511, 207975566, 204878458, 208270918, 208542514, 205357528, 205496540, 205553829, 205950611, 205998636, 207356163, 207356189, 209181551, 226464618, 207124371, 207481441, 207756875, 213632367, 215324674, 226919520, 205857113, 207424805, 207510116, 207687880, 208249698, 214575433, 207167339, 207317389, 207389875, 207389958, 208694349, 218186724, 207389859, 207389933, 207936675, 208249706, 208694703, 214823742, 205977762, 206853228, 207004243, 207424821, 207445669, 207648429, 207688037, 207909060, 208313619, 208338228, 209181650, 207191495, 208270496, 208338087, 208556837, 208643486, 223091208, 207235433, 207481367, 207909763, 214904179, 220088884, 220465801, 204218564, 207166661, 207389792, 207481359, 206652737]
  LOWEST_THIRD_MATH = [203774849, 203776927, 204399455, 205550445, 206202764, 206451866, 203801576, 204050959, 205553928, 206326753, 203646690, 204050850, 205488851, 206202889, 275184513, 204285852, 204362453, 204821896, 206293383, 207356338, 209744333, 204111892, 205507320, 214950800, 220469233, 205585763, 205783046, 205945025, 206451247, 206752313, 207406885, 207469941, 207802505, 205801202, 205585805, 207819848, 204196521, 205439136, 205566656, 206584559, 204365233, 205585714, 205801301, 207250119, 215314188, 205585730, 205998503, 206626574, 207676529, 207757402, 208186627, 209420470, 205629553, 206584088, 207234980, 207528464, 207647751, 207816588, 208982546, 205982861, 206929382, 207085895, 207235185, 207499039, 208313569, 206484495, 207481136, 207648296, 207909284, 208820100, 209091107, 207648437, 208715508, 207648254, 207657479, 207676834, 208410530, 203921846, 205982804, 207662966, 208968206, 209611060, 204226211, 207909292, 209013523, 221195837, 203776844, 203849161, 204066450, 205366396, 205507775, 203898648, 203932520, 204374680, 204379119, 204782247, 205644024, 205739790, 205909864, 221430150, 203629407, 204111371, 204529978, 203735568, 204307128, 204661185, 205553175, 206233199, 206233520, 207819665, 207819897, 207976507, 275256576, 203735576, 203965470, 204319404, 203932991, 204390405, 204444830, 204695654, 204821961, 205670573, 207213489, 207802893, 214610602, 203283502, 204156715, 205527765, 205585680, 206186934, 206483307, 206765901, 207176322, 207356395, 205585706, 205801764, 205801798, 205902307, 205902422, 207688029, 207910407, 221100092, 204471940, 205254253, 205801160, 205933583, 205933955, 206083206, 206374647, 207176124, 207176348, 207205196, 207390139, 207907106, 205336977, 205585672, 206584500, 207129511, 207975566, 204878458, 208270918, 208542514, 205357528, 205496540, 205553829, 205950611, 205998636, 207356163, 207356189, 209181551, 226464618, 207124371, 207481441, 207756875, 213632367, 215324674, 226919520, 205857113, 207424805, 207510116, 207687880, 208249698, 214575433, 207167339, 207317389, 207389875, 207389958, 208694349, 218186724, 207389859, 207389933, 207936675, 208249706, 208694703, 214823742, 205977762, 206853228, 207004243, 207424821, 207445669, 207648429, 207688037, 207909060, 208313619, 208338228, 209181650, 207191495, 208270496, 208338087, 208556837, 208643486, 223091208, 207235433, 207481367, 207909763, 214904179, 220088884, 220465801, 204218564, 207166661, 207389792, 207481359, 209351535, 206652737, 202265831, 204051239, 232157230, 231263930, 231737511, 205732746, 208865444, 231267329, 208420745, 231263948, 231264003, 207248311, 207424672, 231269176]
  LOWEST_THIRD_CITY = [205857113, 207166661]
end

module DataFiles
  EXAMS = Dir.glob('./data/exams-*.csv')
  COURSES = Dir.glob('./data/courses-*.csv')
  STUDENTS = Dir.glob('./data/students-*.csv')
  RECORDS = Dir.glob('./data/records-*.csv')
end

class DataImport
  
  def self.find_all(type = :all)
    raise ArgumentError, 'Invalid type try: :student, :record, :course, or :exam.' unless [:student, :record, :course, :exam].include?(type) || type == :all
    data =  Dir.glob('./data/*.csv')
    type == :all ? data : data.keep_if { |f| /#{type}/.match(f) }
  end
  
  def self.import_records(type, rebuild = false, import_number)
    raise ArgumentError unless type.is_a?(Class)
    type.all.destroy if rebuild
    type = type.to_s.downcase.to_sym
    
    case type
    when :student then find_all(type).each { |f| StudentImporter.new(f, import_number).save_to_db }
    when :record then find_all(type).each { |f| RecordImporter.new(f, import_number).save_to_db }
    when :course then find_all(type).each { |f| CourseImporter.new(f, import_number).save_to_db }
    when :exam then find_all(type).each { |f| ExamImporter.new(f, import_number).save_to_db }
    else 
      raise ArgumentError
    end
  end
  
  def self.scorch!
    Record.all.destroy
    Exam.all.destroy
    Student.all.destroy
    Course.all.destroy
  end

  def self.rebuild!
    import_code = Time.now.to_i
    DataMapper.auto_migrate!
    [Student, Course, Record, Exam].each { |type| import_records(type, true, import_code) }
  end
  
  def self.update_db
  	DataMapper.auto_upgrade!
  end
end